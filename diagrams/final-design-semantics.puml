@startuml Final Design Semantics
!include style.iuml
left to right direction

package foundation {


    interface AggregateFoundation {
        {abstract} {field} + <<type>> AggregateValue[T] subtypeOf SafeIterable[T]
        ...
    }

    abstract class DeviceAwareAggregateFoundation <<self: AggregateFoundation>> {
        {abstract} {field} + <<type>> DeviceId
        ...
    }

    DeviceAwareAggregateFoundation --|> AggregateFoundation
}

package syntax {
    abstract class BranchingSyntax <<self: AggregateFoundation>>{
        {abstract} {method} + branch[T](cond: Boolean)(th: => T)(el: => T): T
    }

    abstract class ExchangeCalculusSyntax <<self: AggregateFoundation>> {
        {abstract} {method} + exchange[T](initial: AggregateValue[T])(\n\
            f: AggregateValue[T] => RetSend[AggregateValue[T]],\n\
        ): AggregateValue[T]
    }

    abstract class FieldCalculusSyntax <<self: AggregateFoundation>> {
        {abstract} {method} + nbr[A](expr: A): AggregateValue[A]
        {abstract} {method} + rep[A](init: A)(f: A => A): A
        {abstract} {method} + share[A](init: A)(f: AggregateValue[A] => A): A
    }
}

package semantics.exchange {
    package syntaxes {
        abstract class BranchingExchangeSemantics <<self: ExchangeCalculusSemantics>> implements syntax.BranchingSyntax
        abstract class ExchangeSemantics <<self: ExchangeCalculusSemantics>> implements syntax.ExchangeCalculusSyntax
        abstract class FieldCalculusByExchangeSemantics <<self: ExchangeCalculusSemantics>> implements syntax.FieldCalculusSyntax
    }
    interface ExchangeCalculusSemantics {
        {abstract} {field} + <<given>> nvalues: NValuesOps[AggregateValue, DeviceId]
        {abstract} {field} + <<given>> convert[T]: Conversion[T, AggregateValue[T]]
        {abstract} {method} # br[T](cond: Boolean)(th: => T)(el: => T): T
        {abstract} {method} # xc[T](init: AggregateValue[T])(\n\
            f: AggregateValue[T] => (AggregateValue[T], AggregateValue[T]),\n\
        ): AggregateValue[T]
    }

    ExchangeCalculusSemantics -|> AggregateFoundation
    ExchangeCalculusSemantics -|> DeviceAwareAggregateFoundation
    ExchangeCalculusSemantics <--|> ExchangeSemantics
    ExchangeCalculusSemantics <--|> BranchingExchangeSemantics
    ExchangeCalculusSemantics <--|> FieldCalculusByExchangeSemantics

    interface NValuesOps<NV[_], DeviceId> {
        {abstract} {method} + <<extension: NV[T]>> default: T
        {abstract} {method} + <<extension: NV[T]>> values: MapView[DeviceId, T]
        {abstract} {method} + <<extension: NV[T]>> set(id: DeviceId, value: T): NV[T]
        {abstract} {method} + <<extension: NV[T]>> get(id: DeviceId): T
        {method} + <<extension: NV[T]>> apply(id: DeviceId): T
    }

    NValuesOps -o ExchangeCalculusSemantics
}
@enduml
